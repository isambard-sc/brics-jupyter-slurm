FROM docker.io/nathanhess/slurm:full-root

# Install packages from from distribution repos
# * OpenSSH server
# * sudo
# Also remove SSH host keys auto-generated during install. SSH host keys should 
# be generated on container startup or mounted into the container to prevent
# fixed keys from being baked into the container image.
RUN <<EOF
apt-get update && apt-get install --assume-yes --no-install-recommends \
  openssh-server \
  sudo
apt-get clean
rm -rf /var/lib/apt/lists/*
rm /etc/ssh/ssh_host_*
EOF

# Create directory for installing supporting tools and data for Jupyter
ENV OPT_JUPYTER_DIR=/opt/jupyter
RUN mkdir -p ${OPT_JUPYTER_DIR}

# Install slurmspawner_wrappers Python package in venv
ENV SLURMSPAWNER_VENV_DIR=${OPT_JUPYTER_DIR}/slurmspawner_wrappers
RUN <<EOF
python3 -m venv --upgrade-deps ${SLURMSPAWNER_VENV_DIR}
${SLURMSPAWNER_VENV_DIR}/bin/python -m pip install "slurmspawner_wrappers @ git+https://github.com/isambard-sc/slurmspawner_wrappers.git"
EOF

# Install Miniforge
ENV MINIFORGE_PREFIX_DIR=${OPT_JUPYTER_DIR}/miniforge3
RUN --mount=type=tmpfs,dst=/tmp/download <<EOF
curl --fail --silent --show-error --location --output "/tmp/download/Miniforge3-latest.sh" "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh"
bash /tmp/download/Miniforge3-latest.sh -b -p ${MINIFORGE_PREFIX_DIR}
EOF

# Install Jupyter user environment
COPY jupyter-user-env.yaml ${OPT_JUPYTER_DIR}/jupyter-user-env.yaml
RUN <<EOF
. ${OPT_JUPYTER_DIR}/miniforge3/bin/activate
conda env create --file="${OPT_JUPYTER_DIR}/jupyter-user-env.yaml"
EOF

# Update sshd config to prevent password auth and increase log verbosity
RUN cat > /etc/ssh/sshd_config.d/custom.conf <<EOF
PasswordAuthentication no
LogLevel VERBOSE
EOF

# Update SSHD_OPTS to set custom log output file for sshd service
RUN sed -E -i -e 's#^SSHD_OPTS=$#&"-E /var/log/sshd.log"#' /etc/default/ssh

# Create jupyterspawner account for JupyterHub to spawn Slurm jobs
# Note the user is created without a password, but SSH login is possible
RUN useradd --create-home \
  --comment "JupyterHub job spawning service account" \
  --home-dir /home/jupyterspawner \
  --user-group \
  --shell /bin/bash \
  jupyterspawner

# Create jupyterusers group
RUN groupadd jupyterusers

# Create a test user with Isambard-style username and home directory path, and
# add to jupyterusers group
# Note the user is created without a password, but jupyterspawner is able run
# commands on behalf of the user using `sudo` via a sudoers policy (below) 
RUN useradd --create-home \
  --comment "Test User" \
  --home-dir /home/project1/testuser.project1 \
  --user-group \
  --shell /bin/bash \
  --groups jupyterusers \
  testuser.project1

# Install sudoers configuration to enable jupyterspawner to run
# slurmspawner_wrappers scripts on behalf of users in jupyterusers group without
# a password, passing through environment variables required by the spawned 
# single-user Jupyter server
RUN cat > /etc/sudoers.d/00_jupyterspawner <<EOF
Defaults:jupyterspawner env_keep += "SLURMSPAWNER_JOB_ID JUPYTERHUB_* JPY_API_TOKEN USER HOME SHELL"
jupyterspawner ALL=(%jupyterusers) NOPASSWD: ${SLURMSPAWNER_VENV_DIR}/bin/slurmspawner_sbatch
jupyterspawner ALL=(%jupyterusers) NOPASSWD: ${SLURMSPAWNER_VENV_DIR}/bin/slurmspawner_squeue
jupyterspawner ALL=(%jupyterusers) NOPASSWD: ${SLURMSPAWNER_VENV_DIR}/bin/slurmspawner_scancel
EOF

# Add script to fix permissions and ownership on SSH key data mounted into container
RUN cat > /usr/local/sbin/fix_ssh_perms.sh <<EOF
#!/bin/bash
# Authorized keys for jupyterspawner user
chown -R jupyterspawner:jupyterspawner /home/jupyterspawner/.ssh
chmod u=rw,g=,o= /home/jupyterspawner/.ssh/authorized_keys
EOF
RUN chmod a+x /usr/local/sbin/fix_ssh_perms.sh

CMD ["/bin/sh", "-c", "/etc/startup.sh; /usr/local/sbin/fix_ssh_perms.sh; service ssh start; tail -f /var/log/slurmctld.log"]